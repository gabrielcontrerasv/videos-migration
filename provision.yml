---
- hosts: all
  become: true
  vars:
    repo_dir: /home/vagrant/repo
    workspace_dir: /home/vagrant
    geckodriver_version: "{{ lookup('url', 'https://api.github.com/repos/mozilla/geckodriver/releases/latest') | from_json | json_query('tag_name') }}"

  tasks:
    - name: Clonar repositorio
      git:
        repo: https://github.com/gabrielcontrerasv/MigrationWebex.git
        dest: "{{repo_dir}}"
        version: migration
    - name: Asignar permisos repo
      file:
        path: "{{repo_dir}}"
        mode: '0755'
        owner: vagrant
        recurse: true
    - name: Descargar repo de firefox
      command: "sudo add-apt-repository -y ppa:mozillateam/ppa"
    - name: Actualizar el sistema operativo
      apt:
        update_cache: yes
        cache_valid_time: 3600
        force_apt_get: true
    - name: Instalar paquetes necesarios
      apt:
        name:
          - wget
          - gnupg2
          - curl
          - unzip
          - libxi6
          - libgconf-2-4
          - libcurl4-openssl-dev
          - firefox-esr
          - python3-pip
          - openconnect
          - libavcodec-extra
        state: latest
    - name: Descargar geckodriver
      get_url:
        url: "https://github.com/mozilla/geckodriver/releases/download/{{ geckodriver_version }}/geckodriver-{{ geckodriver_version }}-linux64.tar.gz"
        dest: /tmp/geckodriver.tar.gz
        mode: 0644
    - name: Descomprimir geckodriver
      unarchive:
        src: /tmp/geckodriver.tar.gz
        dest: /usr/local/bin/
        remote_src: yes
        creates: /usr/local/bin/geckodriver
    - name: Asignar permisos geckodriver
      file:
        path: /usr/local/bin/geckodriver
        mode: '0755'
    - name: Eliminar carpeta de descarga de geckodriver
      command: "rm -rf /tmp/geckodriver.tar.gz"
    - name: Actualizar pip e instalar paquetes de Python 
      pip:
        name:
          - pip
          - mysql-connector-python
        state: latest
    - name: Instalar paquetes de Python a partir de archivo de requisitos
      pip:
        requirements: "{{repo_dir}}/Requirements.txt"
        state: latest
    - name: Instalar Azure CLI
      shell: curl -sL https://aka.ms/InstallAzureCLIDeb | bash
    - name: Copiar archivo .env
      copy:
        src: .env
        dest: "{{repo_dir}}//.env"
        force: yes
    - name: Creates directory
      file:
        path: /etc/vpnc
        state: directory
    - name: Copiar configuracion openconnect
      copy:
        src: default.conf
        dest: /etc/vpnc/default.conf
        force: yes
    - name: Copiar script de conexion vpn
      copy:
        src: vpn.sh
        dest: "{{repo_dir}}/vpn.sh"
        force: yes
    - name: Ejecutar archivo migration.py
      shell: "chdir={{repo_dir}} python3 {{repo_dir}}/migration.py"